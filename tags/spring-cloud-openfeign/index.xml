<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring cloud openfeign on kyon's wonderland with ❤️</title><link>https://kyon.life/tags/spring-cloud-openfeign/</link><description>Recent content in spring cloud openfeign on kyon's wonderland with ❤️</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 17 Jan 2021 15:10:12 +0800</lastBuildDate><atom:link href="https://kyon.life/tags/spring-cloud-openfeign/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 spring cloud openfeign 的一些小技巧</title><link>https://kyon.life/post/tricks-with-feign/</link><pubDate>Sun, 17 Jan 2021 15:10:12 +0800</pubDate><guid>https://kyon.life/post/tricks-with-feign/</guid><description>spring cloud openfeign（以下简称 feign） 通过一个额外定义的 interface 文件作为接口定义，可以将对外提供的 HTTP 接口转换为 API 接口，提供方和调用方需要共同依赖接口文件，将隐式的依赖关系显性表示出来。而且在这个接口文件上也可以大作文章，比如配置服务发现、接口拦截操作等。
一个最简单的 feign 接口文件 DemoClient.java：
1 2 3 4 5 6 7 8 package com.example.demo; @FeignClient(name=&amp;#34;demo&amp;#34;, url=&amp;#34;http://127.0.0.1:8081/&amp;#34;) public interface DemoClient { @GetMapping(&amp;#34;/hello&amp;#34;) String hello(@RequestParam String name); } name 为全局唯一，是这个 FeignClient 的唯一标识，url 为提供方的接口地址。理论上 FeignClient 文件由接口提供方作为合约文件给到调用方，但是即使提供方未提供，只要提供方暴露了 HTTP 接口，那么调用方就可以通过定义 FeignClient 文件将 HTTP 接口调用转换为 API 调用。
调用方使用 DemoClient 示例：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 package com.</description></item></channel></rss>
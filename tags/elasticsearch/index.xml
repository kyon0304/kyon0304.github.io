<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>elasticsearch on kyon&#39;s wonderland with ❤️</title>
    <link>https://kyon.life/tags/elasticsearch/</link>
    <description>Recent content in elasticsearch on kyon&#39;s wonderland with ❤️</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 11 Nov 2018 15:51:10 +0800</lastBuildDate><atom:link href="https://kyon.life/tags/elasticsearch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ElasticSearch 学习记录</title>
      <link>https://kyon.life/post/elasticsearch-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-1/</link>
      <pubDate>Sun, 11 Nov 2018 15:51:10 +0800</pubDate>
      
      <guid>https://kyon.life/post/elasticsearch-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-1/</guid>
      <description>ES 的基本概念  使用 lucene 作为核心搜索库，倒排索引 index 索引，类似于 sql 中的一张表，具有相似数据结构的 document 构成一个 index document 文档，类似于 sql 表中的一条数据，含有多个 field field 类似于 sql 表中的一列，属性及其值 node/cluster es 可以在不同的机器（node）上运行不同的线程，组成 cluster 的形式提供服务 shard 每个 es 进程中可以有多个 shard，每个 index 可以切分到多个 shard 中保存，为了防止数据丢失，shard 可以有一个 primary shard 和多个 replica shard  ES 的分布式架构  不同的 shard 不会保存 index 的全部数据，而是每个 shard 会保存一部分 一个 shard 的 primary/replica 会在不同机器上，当一台机器挂掉后，可以从另一台机器的 shard 中读取/恢复数据 写入 es 时，会向 primary shard 写，primary shard 同步到 replica shard，同步成功后返回写入成功到客户端 读 es 时，可以从 primary shard 读，也可以从 replica 读  ES 的写过程  客户端发起一条数据的写请求，到随意一个机器比如机器 02，02 此时便作为协调节点（coordinating node）发挥作用 协调节点对数据进行哈希，根据结果将数据路由到对应的 primary shard （称为 shard A）所在的节点 shard A 接收到数据后，进行存储，并同步到 replica shard 协调节点等待 shard A 的写入和同步都完成后，向客户端发送写入成功回执  shard A 写数据过程详细   shard A 收到数据后，会先缓存到内存 buffer 中，并写入一份到 translog1 文件的系统缓存（os cache），此时，该条数据虽然写入完成，但是没有经过进一步处理，客户端进行查询的话，是查询不到的</description>
    </item>
    
  </channel>
</rss>

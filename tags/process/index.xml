<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>process on kyon's wonderland with ❤️</title><link>https://kyon.life/tags/process/</link><description>Recent content in process on kyon's wonderland with ❤️</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 01 Sep 2021 13:46:35 +0800</lastBuildDate><atom:link href="https://kyon.life/tags/process/index.xml" rel="self" type="application/rss+xml"/><item><title>操作系统导论学习笔记（二）</title><link>https://kyon.life/post/ostep-2/</link><pubDate>Wed, 01 Sep 2021 13:46:35 +0800</pubDate><guid>https://kyon.life/post/ostep-2/</guid><description>进程 操作系统为正在运行的程序提供的抽象，就是进程。
操作系统也是一种应用程序，会使用数据结构保存进程相关的信息。比如保存正在运行的进程的一些附加信息，保存就绪进程列表，跟踪阻塞进程的信息，以便在合适的时机进行唤醒。进程列表这种数据结构，有时也会被称为 程序控制块 PCB Program Control Block
在任何时刻，都可以清点进程在读取和修改什么内容，机器的哪部分会对进程造成影响，我们称之为进程的机器状态（machine state）
机器状态包括：
内存：程序执行的指令和读取及修改的数据，进程可访问的内存称为进程的地址空间 通用寄存器 一些特殊寄存器 PC 指针：程序正在执行的指令 栈指针 stack pointer，帧指针 frame pointer 用于管理函数参数栈、局部变量和返回地址 I/O 信息： 程序访问的持久化存储设备 现代系统进程都会提供的 API
创建：程序变成进程的过程 销毁：如果程序不肯自己退出，操作系统提供了接口让用户结束进程 等待：有时等待进程停止运行是有用的 其他控制：除等待和销毁外的其他控制接口，比如暂停执行和恢复执行 状态：查看进程状态 操作系统创建进程
从磁盘加载代码和静态数据（比如初始化变量）到内存中 尽早加载 eagerly load 惰性加载 lazily load 只加载执行到的片段，需要内存分页和交换机制支持 分配内存，提供给程序的运行时栈使用，也可能会使用参数（argc, argv）初始化栈 也可能会给程序分配堆内存 其他初始化任务，特别是 I/O 相关的 在 Unix 中，所有进程都默认有 3 个打开的文件描述符：标准输入、标准输出和错误输出 启动程序：通过跳转到 main() 例程，操作系统将 CPU 的控制权交到新创建的进程中，从而程序开始执行 进程的 3 种状态及相互转换</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Philosophy of Software Design on kyon&#39;s wonderland with ❤️</title>
    <link>https://kyon.life/categories/philosophy-of-software-design/</link>
    <description>Recent content in Philosophy of Software Design on kyon&#39;s wonderland with ❤️</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 19 Feb 2020 12:15:39 +0800</lastBuildDate>
    
	<atom:link href="https://kyon.life/categories/philosophy-of-software-design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Philosophy of Software Design 第二章 复杂度的天性</title>
      <link>https://kyon.life/post/philosophy-of-software-design-2/</link>
      <pubDate>Wed, 19 Feb 2020 12:15:39 +0800</pubDate>
      
      <guid>https://kyon.life/post/philosophy-of-software-design-2/</guid>
      <description>这本书是关于如何设计软件系统使得它们的复杂度最小化。第一步是了解敌人。到底什么是“复杂性”？你怎么知道一个系统是不必要的复杂？什么会导致系统</description>
    </item>
    
    <item>
      <title>Philosophy of Software Design 第一章 介绍（一切都与复杂性有关）</title>
      <link>https://kyon.life/post/philosophy-of-software-design-1/</link>
      <pubDate>Wed, 19 Feb 2020 10:16:53 +0800</pubDate>
      
      <guid>https://kyon.life/post/philosophy-of-software-design-1/</guid>
      <description>编写软件是人类历史上最纯粹的创造性活动。程序员不受实践限制的约束，比如物理定律；我们可以创造有着现实世界中不可能存在的行为的令人兴奋的虚拟世</description>
    </item>
    
    <item>
      <title>Philosophy of Software Design 第十一章 设计两次</title>
      <link>https://kyon.life/post/philosophy-of-software-design-11/</link>
      <pubDate>Fri, 14 Feb 2020 10:47:48 +0800</pubDate>
      
      <guid>https://kyon.life/post/philosophy-of-software-design-11/</guid>
      <description>设计软件是很难的，所以当你考虑如何构建一个模块或系统时，不太可能第一个想法就会产生最好的设计。如果对每个主要的设计决定都多考虑几个选项，会得</description>
    </item>
    
    <item>
      <title>Philosophy of Software Design 第十章 通过定义使得错误不复存在</title>
      <link>https://kyon.life/post/philosophy-of-software-design-10/</link>
      <pubDate>Mon, 10 Feb 2020 13:03:59 +0800</pubDate>
      
      <guid>https://kyon.life/post/philosophy-of-software-design-10/</guid>
      <description>异常处理是软件系统中最糟糕的复杂度来源。处理特殊条件的代码天生比处理正常情况的代码更难编写，而且开发者经常不管异常应该怎样处理就定义了它们。</description>
    </item>
    
    <item>
      <title>Philosophy of Software Design 第九章 - 合并还是拆分</title>
      <link>https://kyon.life/post/philosophy-of-software-design-9/</link>
      <pubDate>Thu, 06 Feb 2020 10:53:42 +0800</pubDate>
      
      <guid>https://kyon.life/post/philosophy-of-software-design-9/</guid>
      <description>软件设计中最基本的问题之一是：假定有两个不同的功能，应当在同一个地方实现它们，还是分开实现？这个问题存在于系统的各个层级：函数、方法、类和服</description>
    </item>
    
    <item>
      <title>Philosophy of Software Design - 第八章 降低复杂性</title>
      <link>https://kyon.life/post/philosophy-of-software-design-8/</link>
      <pubDate>Mon, 27 Jan 2020 20:27:11 +0800</pubDate>
      
      <guid>https://kyon.life/post/philosophy-of-software-design-8/</guid>
      <description>这章介绍了另外一种如何设计更有深度的类的考虑方式。假设你正在新建一个模块，然后发现了一处无法避免的复杂实现。下面哪种处理方式更好：应该让模块</description>
    </item>
    
    <item>
      <title>Philosophy of Software Design - 第七章 不同层，不同抽象</title>
      <link>https://kyon.life/post/philosophy-of-software-design/</link>
      <pubDate>Thu, 23 Jan 2020 16:37:33 +0800</pubDate>
      
      <guid>https://kyon.life/post/philosophy-of-software-design/</guid>
      <description>软件系统是由不同层构成的，高层使用底层提供的功能。在一个设计良好的系统中，每一层都提供有别于其他层的抽象，如果你触发一个函数调用并跟踪它在不</description>
    </item>
    
  </channel>
</rss>